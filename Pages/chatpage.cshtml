@page
@model ChatModel
@{
    ViewData["Title"] = "Chat em Tempo Real";
}
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
<div class="container mt-5">
    <div class="row">
        <div class="col-md-12">
            <a href="./index" class="btn btn-link"><i class="bi bi-arrow-left"></i></a>
            <h1 class="text-center">ChatBot Project</h1>
            <div id="messagesContainer" class="border rounded p-3 mb-4" style="height: 400px; overflow-y:auto;">
                <ul id="messagesList" class="list-group"></ul>
            </div>
            <div class="input-group">
                <input type="text" id="messageInput" class="form-control form-control-sm " placeholder="Digite sua mensagem..." style="border: 2px solid #007bff; padding: 19px 20px;" />
                <div class="input-group-append">
                    <button class="btn btn-success btn-sm rounded-pill" onclick="sendMessage()" style="padding: 5px 13px;">
                        <i class="bi bi-send"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.11/signalr.min.js"></script>
    <script>
        // Cria a conexão com o SignalR
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .build();

        // Define o que fazer ao receber uma mensagem
        connection.on("ReceiveMessage", (user, message) => {
            const li = document.createElement("li");
            li.className = "list-group-item text-right";
            li.textContent = `${user}: ${message}`;
            const messagesList = document.getElementById("messagesList");
            messagesList.appendChild(li);
        });

        // Inicia a conexão com o SignalR
        connection.start()
            .then(() => {
                console.log("Conexão estabelecida.");
            })
            .catch(err => {
                console.error("Erro ao estabelecer conexão:", err.toString());
            });

        // Função para enviar mensagem
        function sendMessage() {
            const message = document.getElementById("messageInput").value;

            if (message == '') { return; }

            // Envia a mensagem para o Hub
            connection.invoke("SendMessage", message)
                .then(() => {
                    // Limpa o campo de mensagem após envio
                    document.getElementById("messageInput").value = '';
                    // Rola para o final do container de mensagens
                    messagesList.scrollTop = messagesList.scrollHeight;

                })
                .catch(err => {
                    console.error("Erro ao enviar mensagem:", err.toString());
                });
        }

        // Event listener para enviar mensagem ao pressionar Enter
        document.getElementById("messageInput").addEventListener("keydown", function (event) {
            if (event.key === 'Enter') {
                sendMessage();
            }
        });
    </script>
}
